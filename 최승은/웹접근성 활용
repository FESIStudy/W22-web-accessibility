## 4. 동적 UI 구성요소의 접근성

### SPA 환경에서의 접근성 고려사항 (React / Vue)

* **SPA의 특징**: URL 변경 없이 뷰가 바뀌므로 **스크린 리더가 변화를 감지하지 못하는 경우가 많음**
* **해결 전략**:

  * `document.title` 변경 필수
  * 주요 컨테이너에 `aria-live="polite"` 설정하여 동적 콘텐츠 인식 유도
  * SPA 전환 시 focus 이동을 수동으로 제어 (예: `main` 영역으로 focus 이동)

```tsx
// React 예시
useEffect(() => {
  document.title = "새로운 페이지";
  const mainEl = document.getElementById("main");
  mainEl?.focus();
}, [location.pathname]);
```

* **라우터 트랜지션 중 시각적 전환만 있고 실질적 DOM 변화가 없는 경우**, 접근성 이슈 발생


### 토스트, 팝업, 드롭다운, 툴팁

| 요소   | 접근성 처리 전략                                                    |
| ---- | ------------------------------------------------------------ |
| 토스트  | `aria-live="assertive"`로 알림 전달<br>`role="alert"` 병행          |
| 팝업   | `role="dialog"` / focus trap / ESC 닫기<br>`aria-modal="true"` |
| 드롭다운 | `aria-expanded`, `aria-controls`, 키보드로 열고 닫기                 |
| 툴팁   | `aria-describedby`로 연결 / 마우스 오버 외 키보드 접근 가능성 확보              |

```html
<!-- 드롭다운 예시 -->
<button aria-haspopup="listbox" aria-expanded="true" aria-controls="dropdown-list">옵션</button>
<ul id="dropdown-list" role="listbox">
  <li role="option" tabindex="0">항목 1</li>
</ul>
```

---

### 스크롤 영역 접근성

* 가로/세로 스크롤이 있는 콘텐츠 영역은 `tabindex="0"`을 부여해 focus 가능하게 처리
* ARIA 역할로 `role="region"` + `aria-label`을 부여해 스크린 리더 사용자에게 영역 설명 제공

```html
<div tabindex="0" role="region" aria-label="스크롤 가능한 공지사항 리스트">...</div>
```

### 애니메이션, 로딩 스피너 접근성

* 로딩 중인 영역에는 반드시 `aria-busy="true"`를 설정해 보조기기가 무의미한 반복을 생략하도록 유도
* `prefers-reduced-motion` 미디어 쿼리를 통해 **모션 민감 사용자** 대응

```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
  }
}
```

```html
<div aria-busy="true" aria-live="polite">데이터 불러오는 중입니다...</div>
```

## 5. 자동화 도구와 테스트 전략

### 주요 자동화 도구

| 도구               | 특징                                   |
| ---------------- | ------------------------------------ |
| **Axe DevTools** | 브라우저 확장 / DevTools 통합 / 실시간 이슈 하이라이트 |
| **Lighthouse**   | 성능 + 접근성 + PWA 진단 통합 도구              |
| **WAVE**         | 웹 페이지 전체 스캔 / 비주얼 피드백 제공             |
| **tota11y**      | 페이지 위에 시각적으로 레이어 오버레이                |

→ Axe는 **정적 위주 요소 진단**, Lighthouse는 **전체 페이지 수준 진단**, WAVE는 **실시간 시각화**에 적합

### 수동 테스트 기준

1. **키보드 전용 사용 가능 여부**

   * 모든 인터랙션을 `Tab`, `Shift+Tab`, `Enter`, `Esc`, `Arrow Keys` 등으로 수행 가능해야 함
   * 포커스 표시가 시각적으로 명확하게 보여야 함

2. **스크린 리더 시뮬레이션**

   * 주요 화면 전환 시 정보가 즉시 인식되는가?
   * 의미 없는 태그 낭독이 없는가?
   * 라벨, 알림, 상태 전달이 적절히 이루어지는가?

### 스크린 리더 실습 가이드

| 도구        | 플랫폼        | 특징                       |
| --------- | ---------- | ------------------------ |
| NVDA      | Windows    | 가장 널리 사용되는 무료 스크린 리더     |
| VoiceOver | macOS, iOS | OS에 기본 내장, Safari와 연동 우수 |
| TalkBack  | Android    | 모바일 앱 접근성 테스트에 필수적       |

**실습 팁**:

* `Control + Option + 오른쪽 화살표` (VoiceOver)로 요소 탐색
* `Insert + F7` (NVDA)로 영역/링크/헤딩 목록 확인


## 6. 실무 사례 기반 QA & 에러 핸들링

### 자주 발생하는 오류와 해결법

| 오류 유형              | 해결 전략                                  |
| ------------------ | -------------------------------------- |
| 이미지에 alt 속성 누락     | `alt=""`라도 명시 (장식용이면 비워야 함)            |
| label과 input 연결 누락 | `for` + `id` 또는 label 내부 포함 방식 사용      |
| 키보드 접근 불가한 인터랙션    | 버튼 대신 div 사용 지양, `tabindex`, `role` 추가 |
| 알림 요소에 focus 이동 누락 | 동적 알림 시 `aria-live` + 포커스 이동 병행        |


### 실무 리팩토링 사례 요약

* **문제**: 모달 컴포넌트가 화면에 보이지만, 키보드 포커스가 배경 영역에 머무름

* **조치**: 모달 열릴 때 `first focusable element`로 포커스 이동, ESC로 닫힘 처리, background `aria-hidden`

* **문제**: 탭 UI에서 스크린 리더가 활성 탭을 식별하지 못함

* **조치**: `aria-selected`, `aria-controls`, `role="tablist"`, `role="tabpanel"` 명시하여 명확하게 처리


### 협업 시 설득 전략

* **디자이너 관점**: "시각적 강조가 아니라 **정보 전달 순서**가 중요합니다."
* **PM 관점**: "접근성은 향후 법적 리스크와 유지보수 비용을 줄이는 투자입니다."
* **개발자 관점**: "접근성 구조를 잘 잡으면 재사용성과 테스트 가능성이 오히려 올라갑니다."

> 테스트 코드에 axe-rule를 도입하면 접근성 회귀 테스트도 가능하다는 점을 어필하면 설득력 있음.


## 7. 최신 동향과 정책 이슈

### K-WCAG vs WCAG

| 항목    | WCAG 2.1     | K-WCAG (한국형)      |
| ----- | ------------ | ----------------- |
| 주관기관  | W3C WAI      | 한국지능정보사회진흥원 (NIA) |
| 기준 등급 | A / AA / AAA | A / AA            |
| 적용 범위 | 글로벌 웹 표준     | 국내 공공기관, 대기업      |

→ **K-WCAG는 WCAG 기반이지만, 현장 심사에서 요구되는 체크리스트와 표현 방식에 차이 있음**


### 공공기관, 금융권 접근성 법적 기준

* **공공기관**: 「장애인차별금지 및 권리구제 등에 관한 법률」에 따라 K-WCAG AA 등급 필수
* **금융권**: KISA의 디지털 정보 접근성 지침을 따른 자율 규제 → 실질적으로 AA 수준 요구
* **사후 평가/제재**: 민간 감시단체(웹접근성 인증위원회 등) 또는 시민단체 제소 가능


### 접근성 인증마크 획득 프로세스

1. **자체 사전 점검**: 자동화 도구 + 수동 테스트 병행
2. **전문 기관 심사 의뢰**: NIA 또는 인증된 컨설팅 업체
3. **보완 기간 및 재검**
4. **공식 인증서 발급 및 마크 부착 가능**

→ 실제 심사 항목은 **코드 품질**보다 **기능 동작의 접근 가능성** 중심임

### 접근성과 윤리적 개발, ESG

* 접근성은 단순한 기술의 문제가 아니라 **사회적 책임 및 ESG 경영 요소**
* 특히 기업의 **S(Social)** 측면에서 **정보 접근권 보장**은 주요 항목으로 부각
* 예시: Apple은 VoiceOver와 Switch Control로 **디지털 포용**을 주요 철학으로 삼음
